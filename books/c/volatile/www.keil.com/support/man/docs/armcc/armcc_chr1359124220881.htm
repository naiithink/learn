<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html>

<head>
<title>Compiler User Guide: Compiler Coding Practices</title>
<meta http-equiv="Description" content="Non-Confidential PDF versionARM DUI0375H ARM® Compiler v5.06 for µVision® armcc User GuideVersion 5Home &gt; Compiler Coding Practices Chapter 4 Compiler Coding Practices Describes programming techniques and practices to help you increase the portability, efficiency and robustness of your C and C++ source code. It contains the following sections:4.1 The compiler as an optimizing compiler.4.2 Compiler optimization for code size versus speed.4.3 Compiler optimization levels and the debug view.4.4 Selecting the target processor at compile time.4.5 Enabling FPU for bare-metal.4.6 Optimization of loop termination in C code.&lt;span style=&quot;fon">
<meta name="Description" content="Non-Confidential PDF versionARM DUI0375H ARM® Compiler v5.06 for µVision® armcc User GuideVersion 5Home &gt; Compiler Coding Practices Chapter 4 Compiler Coding Practices Describes programming techniques and practices to help you increase the portability, efficiency and robustness of your C and C++ source code. It contains the following sections:4.1 The compiler as an optimizing compiler.4.2 Compiler optimization for code size versus speed.4.3 Compiler optimization levels and the debug view.4.4 Selecting the target processor at compile time.4.5 Enabling FPU for bare-metal.4.6 Optimization of loop termination in C code.&lt;span style=&quot;fon">
<meta name="KeilToolSet" content="ARM7">
<meta name="Keywords" content="Compiler Coding Practices">


<meta http-equiv="Content-Type" content="text/html; charset=utf-8"><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info = {"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"c4afc5d5b0","applicationID":"38150566","transactionName":"Y1FVbUUFDBAAU0xeXVobeVZFCQMPCEpdUx0e","queueTime":0,"applicationTime":61,"ttGuid":"27F1EF4CF4DAAADE","agent":""}</script><script type="text/javascript">(window.NREUM||(NREUM={})).init={ajax:{deny_list:["bam.nr-data.net"]}};(window.NREUM||(NREUM={})).loader_config={licenseKey:"c4afc5d5b0",applicationID:"38150566"};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var i=e[n]={exports:{}};t[n][0].call(i.exports,function(e){var i=t[n][1][e];return r(i||e)},i,i.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var i=0;i<n.length;i++)r(n[i]);return r}({1:[function(t,e,n){function r(){}function i(t,e,n,r){return function(){return s.recordSupportability("API/"+e+"/called"),o(t+e,[u.now()].concat(c(arguments)),n?null:this,r),n?void 0:this}}var o=t("handle"),a=t(10),c=t(11),f=t("ee").get("tracer"),u=t("loader"),s=t(4),d=NREUM;"undefined"==typeof window.newrelic&&(newrelic=d);var p=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],l="api-",v=l+"ixn-";a(p,function(t,e){d[e]=i(l,e,!0,"api")}),d.addPageAction=i(l,"addPageAction",!0),d.setCurrentRouteName=i(l,"routeName",!0),e.exports=newrelic,d.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(t,e){var n={},r=this,i="function"==typeof e;return o(v+"tracer",[u.now(),t,n],r),function(){if(f.emit((i?"":"no-")+"fn-start",[u.now(),r,i],n),i)try{return e.apply(this,arguments)}catch(t){throw f.emit("fn-err",[arguments,this,t],n),t}finally{f.emit("fn-end",[u.now()],n)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){m[e]=i(v,e)}),newrelic.noticeError=function(t,e){"string"==typeof t&&(t=new Error(t)),s.recordSupportability("API/noticeError/called"),o("err",[t,u.now(),!1,e])}},{}],2:[function(t,e,n){function r(t){if(NREUM.init){for(var e=NREUM.init,n=t.split("."),r=0;r<n.length-1;r++)if(e=e[n[r]],"object"!=typeof e)return;return e=e[n[n.length-1]]}}e.exports={getConfiguration:r}},{}],3:[function(t,e,n){var r=!1;try{var i=Object.defineProperty({},"passive",{get:function(){r=!0}});window.addEventListener("testPassive",null,i),window.removeEventListener("testPassive",null,i)}catch(o){}e.exports=function(t){return r?{passive:!0,capture:!!t}:!!t}},{}],4:[function(t,e,n){function r(t,e){var n=[a,t,{name:t},e];return o("storeMetric",n,null,"api"),n}function i(t,e){var n=[c,t,{name:t},e];return o("storeEventMetrics",n,null,"api"),n}var o=t("handle"),a="sm",c="cm";e.exports={constants:{SUPPORTABILITY_METRIC:a,CUSTOM_METRIC:c},recordSupportability:r,recordCustom:i}},{}],5:[function(t,e,n){function r(){return c.exists&&performance.now?Math.round(performance.now()):(o=Math.max((new Date).getTime(),o))-a}function i(){return o}var o=(new Date).getTime(),a=o,c=t(12);e.exports=r,e.exports.offset=a,e.exports.getLastTimestamp=i},{}],6:[function(t,e,n){function r(t){return!(!t||!t.protocol||"file:"===t.protocol)}e.exports=r},{}],7:[function(t,e,n){function r(t,e){var n=t.getEntries();n.forEach(function(t){"first-paint"===t.name?l("timing",["fp",Math.floor(t.startTime)]):"first-contentful-paint"===t.name&&l("timing",["fcp",Math.floor(t.startTime)])})}function i(t,e){var n=t.getEntries();if(n.length>0){var r=n[n.length-1];if(u&&u<r.startTime)return;var i=[r],o=a({});o&&i.push(o),l("lcp",i)}}function o(t){t.getEntries().forEach(function(t){t.hadRecentInput||l("cls",[t])})}function a(t){var e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;if(e)return e.type&&(t["net-type"]=e.type),e.effectiveType&&(t["net-etype"]=e.effectiveType),e.rtt&&(t["net-rtt"]=e.rtt),e.downlink&&(t["net-dlink"]=e.downlink),t}function c(t){if(t instanceof y&&!w){var e=Math.round(t.timeStamp),n={type:t.type};a(n),e<=v.now()?n.fid=v.now()-e:e>v.offset&&e<=Date.now()?(e-=v.offset,n.fid=v.now()-e):e=v.now(),w=!0,l("timing",["fi",e,n])}}function f(t){"hidden"===t&&(u=v.now(),l("pageHide",[u]))}if(!("init"in NREUM&&"page_view_timing"in NREUM.init&&"enabled"in NREUM.init.page_view_timing&&NREUM.init.page_view_timing.enabled===!1)){var u,s,d,p,l=t("handle"),v=t("loader"),m=t(9),g=t(3),y=NREUM.o.EV;if("PerformanceObserver"in window&&"function"==typeof window.PerformanceObserver){s=new PerformanceObserver(r);try{s.observe({entryTypes:["paint"]})}catch(h){}d=new PerformanceObserver(i);try{d.observe({entryTypes:["largest-contentful-paint"]})}catch(h){}p=new PerformanceObserver(o);try{p.observe({type:"layout-shift",buffered:!0})}catch(h){}}if("addEventListener"in document){var w=!1,b=["click","keydown","mousedown","pointerdown","touchstart"];b.forEach(function(t){document.addEventListener(t,c,g(!1))})}m(f)}},{}],8:[function(t,e,n){function r(t,e){if(!i)return!1;if(t!==i)return!1;if(!e)return!0;if(!o)return!1;for(var n=o.split("."),r=e.split("."),a=0;a<r.length;a++)if(r[a]!==n[a])return!1;return!0}var i=null,o=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var c=navigator.userAgent,f=c.match(a);f&&c.indexOf("Chrome")===-1&&c.indexOf("Chromium")===-1&&(i="Safari",o=f[1])}e.exports={agent:i,version:o,match:r}},{}],9:[function(t,e,n){function r(t){function e(){t(c&&document[c]?document[c]:document[o]?"hidden":"visible")}"addEventListener"in document&&a&&document.addEventListener(a,e,i(!1))}var i=t(3);e.exports=r;var o,a,c;"undefined"!=typeof document.hidden?(o="hidden",a="visibilitychange",c="visibilityState"):"undefined"!=typeof document.msHidden?(o="msHidden",a="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(o="webkitHidden",a="webkitvisibilitychange",c="webkitVisibilityState")},{}],10:[function(t,e,n){function r(t,e){var n=[],r="",o=0;for(r in t)i.call(t,r)&&(n[o]=e(r,t[r]),o+=1);return n}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],11:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,i=n-e||0,o=Array(i<0?0:i);++r<i;)o[r]=t[e+r];return o}e.exports=r},{}],12:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(t,e,n){function r(){}function i(t){function e(t){return t&&t instanceof r?t:t?u(t,f,a):a()}function n(n,r,i,o,a){if(a!==!1&&(a=!0),!l.aborted||o){t&&a&&t(n,r,i);for(var c=e(i),f=m(n),u=f.length,s=0;s<u;s++)f[s].apply(c,r);var p=d[w[n]];return p&&p.push([b,n,r,c]),c}}function o(t,e){h[t]=m(t).concat(e)}function v(t,e){var n=h[t];if(n)for(var r=0;r<n.length;r++)n[r]===e&&n.splice(r,1)}function m(t){return h[t]||[]}function g(t){return p[t]=p[t]||i(n)}function y(t,e){l.aborted||s(t,function(t,n){e=e||"feature",w[n]=e,e in d||(d[e]=[])})}var h={},w={},b={on:o,addEventListener:o,removeEventListener:v,emit:n,get:g,listeners:m,context:e,buffer:y,abort:c,aborted:!1};return b}function o(t){return u(t,f,a)}function a(){return new r}function c(){(d.api||d.feature)&&(l.aborted=!0,d=l.backlog={})}var f="nr@context",u=t("gos"),s=t(10),d={},p={},l=e.exports=i();e.exports.getOrSetContext=o,l.backlog=d},{}],gos:[function(t,e,n){function r(t,e,n){if(i.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(o){}return t[e]=r,r}var i=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){i.buffer([t],r),i.emit(t,e,n)}var i=t("ee").get("handle");e.exports=r,r.ee=i},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,o,function(){return i++})}var i=1,o="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!P++){var t=M.info=NREUM.info,e=g.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return u.abort();f(O,function(e,n){t[e]||(t[e]=n)});var n=a();c("mark",["onload",n+M.offset],null,"api"),c("timing",["load",n]);var r=g.createElement("script");0===t.agent.indexOf("http://")||0===t.agent.indexOf("https://")?r.src=t.agent:r.src=v+"://"+t.agent,e.parentNode.insertBefore(r,e)}}function i(){"complete"===g.readyState&&o()}function o(){c("mark",["domContent",a()+M.offset],null,"api")}var a=t(5),c=t("handle"),f=t(10),u=t("ee"),s=t(8),d=t(6),p=t(2),l=t(3),v=p.getConfiguration("ssl")===!1?"http":"https",m=window,g=m.document,y="addEventListener",h="attachEvent",w=m.XMLHttpRequest,b=w&&w.prototype,E=!d(m.location);NREUM.o={ST:setTimeout,SI:m.setImmediate,CT:clearTimeout,XHR:w,REQ:m.Request,EV:m.Event,PR:m.Promise,MO:m.MutationObserver};var x=""+location,O={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1215.min.js"},T=w&&b&&b[y]&&!/CriOS/.test(navigator.userAgent),M=e.exports={offset:a.getLastTimestamp(),now:a,origin:x,features:{},xhrWrappable:T,userAgent:s,disabled:E};if(!E){t(1),t(7),g[y]?(g[y]("DOMContentLoaded",o,l(!1)),m[y]("load",r,l(!1))):(g[h]("onreadystatechange",i),m[h]("onload",r)),c("mark",["firstbyte",a.getLastTimestamp()],null,"api");var P=0}},{}],"wrap-function":[function(t,e,n){function r(t,e){function n(e,n,r,f,u){function nrWrapper(){var o,a,s,p;try{a=this,o=d(arguments),s="function"==typeof r?r(o,a):r||{}}catch(l){i([l,"",[o,a,f],s],t)}c(n+"start",[o,a,f],s,u);try{return p=e.apply(a,o)}catch(v){throw c(n+"err",[o,a,v],s,u),v}finally{c(n+"end",[o,a,p],s,u)}}return a(e)?e:(n||(n=""),nrWrapper[p]=e,o(e,nrWrapper,t),nrWrapper)}function r(t,e,r,i,o){r||(r="");var c,f,u,s="-"===r.charAt(0);for(u=0;u<e.length;u++)f=e[u],c=t[f],a(c)||(t[f]=n(c,s?f+r:r,i,f,o))}function c(n,r,o,a){if(!v||e){var c=v;v=!0;try{t.emit(n,r,o,e,a)}catch(f){i([f,n,r,o],t)}v=c}}return t||(t=s),n.inPlace=r,n.flag=p,n}function i(t,e){e||(e=s);try{e.emit("internal-error",t)}catch(n){}}function o(t,e,n){if(Object.defineProperty&&Object.keys)try{var r=Object.keys(t);return r.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(o){i([o],n)}for(var a in t)l.call(t,a)&&(e[a]=t[a]);return e}function a(t){return!(t&&t instanceof Function&&t.apply&&!t[p])}function c(t,e){var n=e(t);return n[p]=t,o(t,n,s),n}function f(t,e,n){var r=t[e];t[e]=c(r,n)}function u(){for(var t=arguments.length,e=new Array(t),n=0;n<t;++n)e[n]=arguments[n];return e}var s=t("ee"),d=t(11),p="nr@original",l=Object.prototype.hasOwnProperty,v=!1;e.exports=r,e.exports.wrapFunction=c,e.exports.wrapInPlace=f,e.exports.argsToArray=u},{}]},{},["loader"]);</script>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="Author" content="ARM Ltd and ARM Germany GmbH">
<meta name="Copyright" content="Copyright (c) 2022, ARM Ltd and ARM Germany GmbH.  All rights reserved.">
<link rel="meta" href="/labels.xml" type="application/rdf+xml" title="ICRA labels">

<!--[if IE]>

<![endif]-->
<link rel="stylesheet" type="text/css" href="/_css/t6_ncm.min.css">
<link rel="stylesheet" type="text/css" href="/_css/t6_man_sidebar.css">
<link rel="stylesheet" type="text/css" href="/_css/armEclipse.css">
<script src="/_css/armNavRollovers.js" type="text/javascript"></script>
<!--[if lt IE 7]>
<script src="/_js/t6_supersleight.js" type="text/javascript"></script>
<![endif]-->
<link rel="stylesheet" type="text/css" href="/css/popups.min.css?v=20161005">
<link rel="stylesheet" type="text/css" href="/content/fonts/ss-standard.css">
<link rel="stylesheet" type="text/css" href="/content/css/refresh.min.css?v=20161228">
<link rel="stylesheet" type="text/css" href="/Scripts/bootstrap3.3.4/css/bootstrap.min.css">
<script type="text/javascript" src="//code.jquery.com/jquery-1.11.0.min.js"></script><script type="text/javascript" src="//code.jquery.com/jquery-migrate-1.2.1.min.js"></script><script type="text/javascript" src="/Content/Script/selectivizr-min.js"></script><script src="/Content/Script/jquery.placeholderpatch.js" type="text/javascript"></script><script type="text/javascript">var NREUMQ = NREUMQ || []; NREUMQ.push(["mark", "firstbyte", new Date().getTime()]);</script><script type="text/javascript" src="/Scripts/jquery.keil.js?v=20161005"></script><script type="text/javascript" src="/Scripts/angular.min.js"></script><script type="text/javascript" src="/Scripts/angular-sanitize.min.js"></script><script type="text/javascript" src="/Scripts/ui-bootstrap/ui-bootstrap-tpls-0.13.0.min.js"></script><script type="text/javascript" src="/Scripts/angularGrid/angularGrid.min.js"></script><script type="text/javascript" src="/app/src/app.js"></script><link rel="stylesheet" type="text/css" href="/_css/t6_man.css">
<link rel="stylesheet" type="text/css" href="/_css/t6_man_sidebar.css">
<script src="/_js/t6_keil_man.js" type="text/javascript"></script>

</head>

<body>

<table class="Main" border="0" cellpadding="0" cellspacing="0">
  <tr>
    <td class="Top" colspan="2">
			<table style="border-collapse: collapse">

				<tr><!-- header -->
					<td colspan=2 style="padding: 0;">
						<table class="header">
							<tr>
                                <td>
                                    <a href="/">
                                        <img alt="Keil Logo" src="/Content/images/Arm_KEIL_horizontal_white_LG.png" style="height:45px"/></a>
                                </td>
							</tr>
						</table>
					</td>
                    </tr>
                    <!-- end of .header -->


        <tr class="Menu">
          <td class="LMenu" style="vertical-align:top; width:50%">
<a title="Visit the Keil Home Page" href="/" class="current ss-home"></a><a title="Get Information About Keil Products" href="/product/">Products</a>
<a title="Download Keil products and files" href="/download/">Download</a>
<a title="Upcoming Trade Shows, Workshops, and Seminars" href="/events/">Events</a>
<a title="Get Technical Support for Keil Products" href="/support/">Support</a>
<a title="Videos" href="http://www2.keil.com/video">Videos</a>

          </td>
          <td class="RMenu" style="vertical-align:top; width:50%">
<form name="keilsrchfm" id="keilsrchfm" method="get" action="javascript:redirect();" id="ng-app" data-ng-app="keilapp" data-ng-controller="AdvancedSearchFormController">    <div class="col-sm-12" style="margin-top:5px;margin-bottom:0px;padding-right:0px;">        <div class="col-sm-10" align="right" style="padding-right:0px;">            <label class="ss-search search-icon" for="search">&nbsp;</label>            <input type="text" id="search" placeholder="Search Keil..." style="color:#999;width:300px;" data-ng-model="searchTerm">            <input type="hidden" name="searchTerm" value={{searchTerm}} />            <input type="hidden" name="productFamily" value={{productFamily}} />            <input type="hidden" name="modifiedDays" value={{modifiedDays}} />            <input type="hidden" name="site" value={{getSite()}} />        </div>        <div class="col-sm-2" data-ng-cloak>            <input type="button" data-ng-click="toggleAdvancedOptions()" value={{advancedOptionsBtnText}} class="button" style="width:32px;">            <input type="Submit" value="Go" class="button" style="width:32px;">        </div>    </div>    <div data-ng-show="advancedOptions" class="col-sm-12 ng-hide" style="margin-top:0px;margin-bottom:0px;padding-right:0px;">        <div class="col-sm-10" align="right" style="margin-top:3px;margin-bottom:0px;padding-right:0px;">            <select class="form-control" id="productFamily" data-ng-model="productFamily" style="font-size:14px;border:none;height:20px;width:300px;padding-top:2px;padding-right:2px;padding-bottom:2px;padding-left:20px;">                <option selected value="">All Product Families</option>                <option value="ARM7">ARM7, ARM9, and Cortex-M3 Products</option>                <option value="166">C16x, XC16x, and ST10 Products</option>                <option value="251">C251 and 80C251 Products</option>                <option value="8051">Cx51 and 8051 Products</option>            </select>        </div>        <div class="col-sm-10" align="right" style="margin-top:5px;margin-bottom:5px;padding-right:0px;">            <select class="form-control" id="modifiedDays" data-ng-model="modifiedDays" style="font-size:14px;border:none;height:20px;width:300px;padding-top:2px;padding-right:2px;padding-bottom:2px;padding-left:20px;">                <option selected value="">Modified Anytime</option>                <option value="7">In the Last 7 Days</option>                <option value="14">In the Last 14 Days</option>                <option value="30">In the Last 30 Days</option>                <option value="90">In the Last 90 Days</option>                <option value="180">In the Last 6 Months</option>            </select>        </div>    </div></form><script src="/app/src/search/controllers/AdvancedSearchFormController.js"></script><script type="text/javascript">    function redirect() {        var newUrl = decodeURI(window.location.href.split('/').pop());        window.history.pushState('object or string', 'Title', newUrl);        var srcTerm = $('#search').val();        if (srcTerm.trim()) {			   window.location.replace('https://developer.arm.com/search/#q=' + srcTerm + '&sort=relevancy&f:@navigationhierarchiesproducts=[Tools%20and%20Software,Keil%20Products]');        }    }</script>

          </td>
        </tr>
      </table>
    </td>
  </tr>

  <tr>

    <td class="Bar">
      <div id="vm">
<p>Technical Support</p>
<ul>
<li><a href="/support/">Overview</a></li>
<li><a href="/home/searchhelp">Search</a></li>
<li><a href="/support/contact.asp">Contact</a></li>
<li><a href="/support/request.asp">Assistance Request</a></li>
<li><a href="/support/feedback.asp">Feedback</a></li>
</ul>
<p>On-Line Manuals</p>
<ul>
<li><a href="/support/man/">Product Manuals</a></li>
<li><a href="/support/man/conventions.asp">Document Conventions</a></li>
</ul>
<p>Compiler User Guide</p>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_deb1353593789871.htm">Preface</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124191020.htm">Overview of the Compiler</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124194109.htm">Getting Started with the Compiler</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124210536.htm">Compiler Features</a></span>
<span class="toc toc0"><img src="/images/h_06.gif" alt="" width="16" height="16"> <b><a href="armcc_chr1359124220881.htm">Compiler Coding Practices</a></b></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124221178.htm">The compiler as an optimizing compiler</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124221443.htm">Compiler optimization for code size versus speed</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124221739.htm">Compiler optimization levels and the debug view</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124221958.htm">Selecting the target processor at compile time</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_pge1416481958654.htm">Enabling FPU for bare-metal</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124222426.htm">Optimization of loop termination in C code</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124222660.htm">Loop unrolling in C code</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124222941.htm">Compiler optimization and the volatile keyword</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124223206.htm">Code metrics</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124223455.htm">Code metrics for measurement of code size and data</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124223721.htm">Stack use in C and C++</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124223955.htm">Benefits of reducing debug information in objects</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124224235.htm">Methods of reducing debug information in objects a</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124224501.htm">Guarding against multiple inclusion of header file</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124224750.htm">Methods of minimizing function parameter passing o</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124225000.htm">Returning structures from functions through regist</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124225265.htm">Functions that return the same result when called</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124225530.htm">Comparison of pure and impure functions</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124225842.htm">Recommendation of postfix syntax when qualifying f</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124226061.htm">Inline functions</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124226326.htm">Compiler decisions on function inlining</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124226591.htm">Automatic function inlining and static functions</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124226825.htm">Inline functions and removal of unused out-of-line</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124227090.htm">Automatic function inlining and multifile compilat</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124227340.htm">Restriction on overriding compiler decisions about</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124227574.htm">Compiler modes and inline functions</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124227808.htm">Inline functions in C++ and C90 mode</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124228026.htm">Inline functions in C99 mode</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124228276.htm">Inline functions and debugging</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124228525.htm">Types of data alignment</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124228744.htm">Advantages of natural data alignment</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124228978.htm">Compiler storage of data objects by natural byte a</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124229212.htm">Relevance of natural data alignment at compile tim</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124229461.htm">Unaligned data access in C and C++ code</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124229695.htm">The __packed qualifier and unaligned data access i</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124229929.htm">Unaligned fields in structures</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124230195.htm">Performance penalty associated with marking whole</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124230476.htm">Unaligned pointers in C and C++ code</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124230710.htm">Unaligned Load Register (LDR) instructions generat</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124230944.htm">Comparisons of an unpacked struct, a __packed stru</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124231193.htm">Compiler support for floating-point arithmetic</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124231427.htm">Default selection of hardware or software floating</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124231692.htm">Example of hardware and software support differenc</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124231926.htm">Vector Floating-Point (VFP) architectures</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124232160.htm">Limitations on hardware handling of floating-point</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124232426.htm">Implementation of Vector Floating-Point (VFP) supp</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124232675.htm">Compiler and library support for half-precision fl</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124233455.htm">Half-precision floating-point number format</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124233705.htm">Compiler support for floating-point computations a</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124233939.htm">Types of floating-point linkage</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124234220.htm">Compiler options for floating-point linkage and co</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124234516.htm">Floating-point linkage and computational requireme</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124234797.htm">Processors and their implicit Floating-Point Units</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124235078.htm">Integer division-by-zero errors in C code</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124236294.htm">Software floating-point division-by-zero errors in</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124236544.htm">About trapping software floating-point division-by</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124236778.htm">Identification of software floating-point division</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124237028.htm">Software floating-point division-by-zero debugging</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124237277.htm">New language features of C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124237527.htm">New library features of C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124237761.htm">// comments in C99 and C90</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124238010.htm">Compound literals in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124238260.htm">Designated initializers in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124238525.htm">Hexadecimal floating-point numbers in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124238837.htm">Flexible array members in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124239071.htm">__func__ predefined identifier in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124239337.htm">inline functions in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124239586.htm">long long data type in C99 and C90</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124239851.htm">Macros with a variable number of arguments in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124240101.htm">Mixed declarations and statements in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124240335.htm">New block scopes for selection and iteration state</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124240616.htm">_Pragma preprocessing operator in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124240881.htm">Restricted pointers in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124241146.htm">Additional <math.h> library functions in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124241427.htm">Complex numbers in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124241645.htm">Boolean type and <stdbool.h> in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124241911.htm">Extended integer types and functions in <inttypes.</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124242207.htm"><fenv.h> floating-point environment access in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124242425.htm"><stdio.h> snprintf family of functions in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124242691.htm"><tgmath.h> type-generic math macros in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124242940.htm"><wchar.h> wide character I/O functions in C99</a></span>
<span class="toc toc1"><img src="/images/h_11.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124243221.htm">How to prevent uninitialized data from being initi</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124243783.htm">Compiler Diagnostic Messages</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124245889.htm">Using the Inline and Embedded Assemblers of the AR</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124898004.htm">Compiler Command-line Options</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124953729.htm">Language Extensions</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359124965789.htm">Compiler-specific Features</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359125008566.htm">C and C++ Implementation Details</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_pge1358787045051.htm">What is Semihosting?</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359125030640.htm">Via File Syntax</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359125031592.htm">Summary Table of GNU Language Extensions</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359125032122.htm">Standard C Implementation Definition</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359125036178.htm">Standard C++ Implementation Definition</a></span>
<span class="toc toc0"><img src="/images/h_05.gif" alt="" width="16" height="16"> <a href="armcc_chr1359125037582.htm">C and C++ Compiler Implementation Limits</a></span>


      </div>
    </td>

    <td class="Bdy">
      <div class="Bdy">
      <div class="breadcrumb"><a href="/">Home</a>&nbsp;&nbsp;&#47;&nbsp;&nbsp;Compiler User Guide</div>



<h1 class="mptitle">
<script type="text/javascript">
<!--
var kmNextPage      = "armcc_chr1359124221178.htm";
var kmPrevPage      = "armcc_chr1359124220320.htm";
var kmNextPageTitle = "The compiler as an optimizing compiler";
var kmPrevPageTitle = "Default compiler options that are affected by opti";
var kmBreadCrumbs   = "<a href=\"default.htm\">Home</a> &raquo; Compiler Coding Practices";

kmSetupPaging ();
kmNavButtons();
//-->
</script>
Compiler Coding Practices</h1>

<p class="navbc">
<script type="text/javascript">
<!--
kmNavBreadCrumbs();
//-->
</script>
</p>


<div class="headers"><table class="navheader" width="100%" border="0" cellpadding="0" cellspacing="0" summary="Navigation header"><tbody><tr class="legalfooter secstatusbar"><td class="securitycell" align="left" valign="top" width="33%">Non-Confidential</td><td class="pdflinkcell" align="center" valign="top" width="33%"><a href="DUI0375H_mdk_armcc_user_guide.pdf"  rel="nofollow"><img border="0" src="../com.arm.doc.common/images/pdficon_small.gif" alt="PDF file icon"> PDF version</a></td><td class="modificationdatecell" align="right" valign="top" width="33%">ARM DUI0375H</td></tr><tr class="titlingbar"><td class="titlingcell" colspan="3"><table class="titletable" width="100%" border="0" cellpadding="0" cellspacing="0" summary="Nested table"><tbody><tr class="titlebar"><td class="titlecell" align="left" valign="baseline"><span>
  <span><span>ARM<sup>®</sup></span> Compiler</span> v5.06 for <span>µVision<sup>®</sup></span>
  </span> <span> armcc User Guide</span></td><td class="subtitlecell" align="right" valign="baseline">Version 5</td></tr></tbody></table></td></tr><tr class="breadcrumbbar"><td class="breadcrumbcell" colspan="2"><a href="default.htm" accesskey="h">Home</a> &gt; Compiler Coding Practices</td></tr></tbody></table></div>
<div class="book"><h2 class="topictitle2">Chapter 4 Compiler Coding Practices</h2>
<p class="p">Describes programming techniques and practices to help you increase the portability, efficiency and robustness of your C and C++ source code.</p><div>
    <div class="section"></div>


  </div><div class="p">It contains the following sections:</div><div class="itemizedlist"><ul type="disc" compact="compact"><li><p><a class="xref" title="The compiler is highly optimizing for small code size and high performance, performing a range of optimization techniques." href="armcc_chr1359124221178.htm"><span style="font-style:italic">4.1 </span><span style="font-style:italic">The compiler as an optimizing compiler</span>.</a></p></li><li><p><a class="xref" title="The compiler can optimize for either code size or performance." href="armcc_chr1359124221443.htm"><span style="font-style:italic">4.2 </span><span style="font-style:italic">Compiler optimization
for code size versus speed</span>.</a></p></li><li><p><a class="xref" title="The precise optimizations performed by the compiler depend both on the level of optimization chosen, and whether you are optimizing for performance or code size." href="armcc_chr1359124221739.htm"><span style="font-style:italic">4.3 </span><span style="font-style:italic">Compiler optimization levels and the debug view</span>.</a></p></li><li><p><a class="xref" title="You can often significantly improve the performance of your C or C++ code by selecting the appropriate target processor at compile time." href="armcc_chr1359124221958.htm"><span style="font-style:italic">4.4 </span><span style="font-style:italic">Selecting the target processor at compile time</span>.</a></p></li><li><p><a class="xref" title="If the compiler knows that an FPU is available, for example if you use the --cpu option to specify a processor with an FPU, then the compiler might introduce FPU instructions into your code." href="armcc_pge1416481958654.htm"><span style="font-style:italic">4.5 </span><span style="font-style:italic">Enabling FPU for bare-metal</span>.</a></p></li><li><p><a class="xref" title="Loops are a common construct in most programs. Because a significant amount of execution time is often spent in loops, it is worthwhile paying attention to time-critical loops." href="armcc_chr1359124222426.htm"><span style="font-style:italic">4.6 </span><span style="font-style:italic">Optimization of loop termination in C code</span>.</a></p></li><li><p><a class="xref" title="Loops are a common construct in most programs. Because a significant amount of execution time is often spent in loops, it is worthwhile paying attention to time-critical loops." href="armcc_chr1359124222660.htm"><span style="font-style:italic">4.7 </span><span style="font-style:italic">Loop unrolling in C code</span>.</a></p></li><li><p><a class="xref" title="Higher optimization levels can reveal problems in some programs that are not apparent at lower optimization levels, for example, missing volatile qualifiers." href="armcc_chr1359124222941.htm"><span style="font-style:italic">4.8 </span><span style="font-style:italic">Compiler optimization and the volatile keyword</span>.</a></p></li><li><p><a class="xref" title="Code metrics provide a means of objectively evaluating code quality. The compiler and linker provide several facilities for generating simple code metrics and improving code quality." href="armcc_chr1359124223206.htm"><span style="font-style:italic">4.9 </span><span style="font-style:italic">Code metrics</span>.</a></p></li><li><p><a class="xref" title="The compiler, linker, and fromelf image converter let you measure code and data size." href="armcc_chr1359124223455.htm"><span style="font-style:italic">4.10 </span><span style="font-style:italic">Code metrics for measurement of code size and data size</span>.</a></p></li><li><p><a class="xref" title="C and C++ both use the stack intensively." href="armcc_chr1359124223721.htm"><span style="font-style:italic">4.11 </span><span style="font-style:italic">Stack use in C and C++</span>.</a></p></li><li><p><a class="xref" title="Reducing the amount of debug information in objects and libraries has a number of code size and performance benefits." href="armcc_chr1359124223955.htm"><span style="font-style:italic">4.12 </span><span style="font-style:italic">Benefits of reducing debug information in objects and libraries</span>.</a></p></li><li><p><a class="xref" title="There are a number of ways to reduce the amount of debug information being generated per source file." href="armcc_chr1359124224235.htm"><span style="font-style:italic">4.13 </span><span style="font-style:italic">Methods of reducing debug information in objects and libraries</span>.</a></p></li><li><p><a class="xref" title="Guarding against multiple inclusion of header files has a number of benefits." href="armcc_chr1359124224501.htm"><span style="font-style:italic">4.14 </span><span style="font-style:italic">Guarding against multiple inclusion of header files</span>.</a></p></li><li><p><a class="xref" title="There are a number of ways in which you can minimize the overhead of passing parameters to functions." href="armcc_chr1359124224750.htm"><span style="font-style:italic">4.15 </span><span style="font-style:italic">Methods of minimizing function parameter passing overhead</span>.</a></p></li><li><p><a class="xref" title="The compiler allows functions to return structures containing multiple values through the registers, rather than the stack." href="armcc_chr1359124225000.htm"><span style="font-style:italic">4.16 </span><span style="font-style:italic">Returning structures from functions through registers</span>.</a></p></li><li><p><a class="xref" title="A function that always returns the same result when called with the same arguments, and does not change any global data, is referred to as a pure function." href="armcc_chr1359124225265.htm"><span style="font-style:italic">4.17 </span><span style="font-style:italic">Functions that return the same result when called with the same arguments</span>.</a></p></li><li><p><a class="xref" title="The two sample routines in the following table illustrate the use of the __pure keyword." href="armcc_chr1359124225530.htm"><span style="font-style:italic">4.18 </span><span style="font-style:italic">Comparison of pure and impure functions</span>.</a></p></li><li><p><a class="xref" title="You can use function modifiers such as __pure either prefix or postfix, that is before the function declaration or after the parameter list. ARM recommends using the more precise postfix syntax." href="armcc_chr1359124225842.htm"><span style="font-style:italic">4.19 </span><span style="font-style:italic">Recommendation of postfix syntax when qualifying functions with ARM function
      modifiers</span>.</a></p></li><li><p><a class="xref" title="Inline functions offer a trade-off between code size and performance. By default, the compiler decides for itself whether to inline code or not." href="armcc_chr1359124226061.htm"><span style="font-style:italic">4.20 </span><span style="font-style:italic">Inline functions</span>.</a></p></li><li><p><a class="xref" title="When function inlining is enabled, the compiler uses a complex decision tree to decide if a function is to be inlined." href="armcc_chr1359124226326.htm"><span style="font-style:italic">4.21 </span><span style="font-style:italic">Compiler decisions on function inlining</span>.</a></p></li><li><p><a class="xref" title="At -O2 and -O3 levels of optimization, or when --autoinline is specified, the compiler can automatically inline functions if it is practical and possible to do so, even if the functions are not declared as __inline or inline." href="armcc_chr1359124226591.htm"><span style="font-style:italic">4.22 </span><span style="font-style:italic">Automatic function inlining and static functions</span>.</a></p></li><li><p><a class="xref" title="The linker cannot remove unused out-of-line functions from an object unless you place the unused out-of-line functions in their own sections." href="armcc_chr1359124226825.htm"><span style="font-style:italic">4.23 </span><span style="font-style:italic">Inline functions and removal of unused out-of-line functions at link time</span>.</a></p></li><li><p><a class="xref" title="If you are compiling with the --multifile option, the compiler can perform automatic inlining for calls to functions that are defined in other translation units." href="armcc_chr1359124227090.htm"><span style="font-style:italic">4.24 </span><span style="font-style:italic">Automatic function inlining and multifile compilation</span>.</a></p></li><li><p><a class="xref" title="You can enable and disable function inlining, but you cannot override decisions the compiler makes about when it is practical to inline a function." href="armcc_chr1359124227340.htm"><span style="font-style:italic">4.25 </span><span style="font-style:italic">Restriction on overriding compiler
decisions about function inlining</span>.</a></p></li><li><p><a class="xref" title="Compiler modes affect the behavior of inline functions." href="armcc_chr1359124227574.htm"><span style="font-style:italic">4.26 </span><span style="font-style:italic">Compiler modes
and inline functions</span>.</a></p></li><li><p><a class="xref" title="The inline keyword is not available in C90. The effect of __inline in C90, and __inline and inline in C++, is identical." href="armcc_chr1359124227808.htm"><span style="font-style:italic">4.27 </span><span style="font-style:italic">Inline functions in C++ and C90 mode</span>.</a></p></li><li><p><a class="xref" title="The rules for C99 inline functions with external linkage differ from those of C++." href="armcc_chr1359124228026.htm"><span style="font-style:italic">4.28 </span><span style="font-style:italic">Inline functions
in C99 mode</span>.</a></p></li><li><p><a class="xref" title="The debug view generated for inline functions is generally good. However, it is sometimes useful to avoid inlining functions because in some situations, debugging is clearer if they are not inlined." href="armcc_chr1359124228276.htm"><span style="font-style:italic">4.29 </span><span style="font-style:italic">Inline functions and debugging</span>.</a></p></li><li><p><a class="xref" title="All access to data in memory can be classified into a number of different categories." href="armcc_chr1359124228525.htm"><span style="font-style:italic">4.30 </span><span style="font-style:italic">Types of data alignment</span>.</a></p></li><li><p><a class="xref" title="The various C data types are aligned on specific byte boundaries to maximize storage potential and to provide for fast, efficient memory access with the ARM instruction set." href="armcc_chr1359124228744.htm"><span style="font-style:italic">4.31 </span><span style="font-style:italic">Advantages of natural data alignment</span>.</a></p></li><li><p><a class="xref" title="C data types are aligned on specific byte boundaries, depending on their type." href="armcc_chr1359124228978.htm"><span style="font-style:italic">4.32 </span><span style="font-style:italic">Compiler storage of data objects by natural byte alignment</span>.</a></p></li><li><p><a class="xref" title="Data alignment becomes relevant when the compiler allocates memory locations to variables." href="armcc_chr1359124229212.htm"><span style="font-style:italic">4.33 </span><span style="font-style:italic">Relevance of natural data alignment
at compile time</span>.</a></p></li><li><p><a class="xref" title="It can be necessary to access unaligned data in memory, for example, when porting legacy code from a CISC architecture where instructions are available to directly access unaligned data in memory." href="armcc_chr1359124229461.htm"><span style="font-style:italic">4.34 </span><span style="font-style:italic">Unaligned data access in C and C++ code</span>.</a></p></li><li><p><a class="xref" title="The __packed qualifier sets the alignment of any valid type to 1." href="armcc_chr1359124229695.htm"><span style="font-style:italic">4.35 </span><span style="font-style:italic">The __packed qualifier and unaligned data access in C and C++ code</span>.</a></p></li><li><p><a class="xref" title="You can use the __packed qualifier to create unaligned fields in structures. This saves space because the compiler does not need to pad fields to their natural size boundary." href="armcc_chr1359124229929.htm"><span style="font-style:italic">4.36 </span><span style="font-style:italic">Unaligned fields in structures</span>.</a></p></li><li><p><a class="xref" title="Reading from and writing to whole structures qualified with __packed requires unaligned accesses and can therefore incur a performance penalty." href="armcc_chr1359124230195.htm"><span style="font-style:italic">4.37 </span><span style="font-style:italic">Performance
penalty associated with marking whole structures as packed</span>.</a></p></li><li><p><a class="xref" title="If you want to define a pointer that can point to a word at any address, you must specify the __packed qualifier." href="armcc_chr1359124230476.htm"><span style="font-style:italic">4.38 </span><span style="font-style:italic">Unaligned pointers in C and C++ code</span>.</a></p></li><li><p><a class="xref" title="In some circumstances, where it is legal to do so, the compiler might intentionally generate unaligned LDR instructions." href="armcc_chr1359124230710.htm"><span style="font-style:italic">4.39 </span><span style="font-style:italic">Unaligned Load Register (LDR) instructions generated by the compiler</span>.</a></p></li><li><p><a class="xref" title="These comparisons illustrate the differences between the methods of packing structures." href="armcc_chr1359124230944.htm"><span style="font-style:italic">4.40 </span><span style="font-style:italic">Comparisons of an unpacked struct, a __packed struct, and a struct with
            individually __packed fields, and of a __packed struct and a #pragma packed
            struct</span>.</a></p></li><li><p><a class="xref" title="The compiler provides many features for managing floating-point arithmetic both in hardware and in software." href="armcc_chr1359124231193.htm"><span style="font-style:italic">4.41 </span><span style="font-style:italic">Compiler support for floating-point arithmetic</span>.</a></p></li><li><p><a class="xref" title="The default target FPU architecture is derived from use of the --cpu option." href="armcc_chr1359124231427.htm"><span style="font-style:italic">4.42 </span><span style="font-style:italic">Default selection
of hardware or software floating-point support</span>.</a></p></li><li><p><a class="xref" title="This example shows how the compiler deals with floating-point arithmetic for different processors supporting either hardware or software floating-point arithmetic." href="armcc_chr1359124231692.htm"><span style="font-style:italic">4.43 </span><span style="font-style:italic">Example of hardware and software support differences for floating-point
      arithmetic</span>.</a></p></li><li><p><a class="xref" title="ARM supports several versions of the VFP architecture, implemented in different ARM architectures." href="armcc_chr1359124231926.htm"><span style="font-style:italic">4.44 </span><span style="font-style:italic">Vector Floating-Point (VFP) architectures</span>.</a></p></li><li><p><a class="xref" title="ARM Vector Floating-Point (VFP) coprocessors are optimized to process well-defined floating-point code in hardware. Arithmetic operations that occur too rarely, or that are too complex, are not handled in hardware." href="armcc_chr1359124232160.htm"><span style="font-style:italic">4.45 </span><span style="font-style:italic">Limitations on hardware handling of floating-point arithmetic</span>.</a></p></li><li><p><a class="xref" title="For convenience, an implementation of VFP support code that can be used in your system is provided with your installation of the ARM compilation tools." href="armcc_chr1359124232426.htm"><span style="font-style:italic">4.46 </span><span style="font-style:italic">Implementation of Vector Floating-Point (VFP) support code</span>.</a></p></li><li><p><a class="xref" title="Half-precision is a floating-point format that occupies 16 bits." href="armcc_chr1359124232675.htm"><span style="font-style:italic">4.47 </span><span style="font-style:italic">Compiler and library support for half-precision floating-point numbers</span>.</a></p></li><li><p><a class="xref" title="The half-precision floating-point formats available are ieee and alternative. In both formats, the basic layout of the 16-bit number is the same." href="armcc_chr1359124233455.htm"><span style="font-style:italic">4.48 </span><span style="font-style:italic">Half-precision
floating-point number format</span>.</a></p></li><li><p><a class="xref" title="It is important to understand the difference between floating-point computations and floating-point linkage." href="armcc_chr1359124233705.htm"><span style="font-style:italic">4.49 </span><span style="font-style:italic">Compiler support for floating-point computations and linkage</span>.</a></p></li><li><p><a class="xref" title="Different types of floating-point linkage provide different benefits." href="armcc_chr1359124233939.htm"><span style="font-style:italic">4.50 </span><span style="font-style:italic">Types of floating-point linkage</span>.</a></p></li><li><p><a class="xref" title="Compiler options determine the type of floating-point linkage and floating-point computations." href="armcc_chr1359124234220.htm"><span style="font-style:italic">4.51 </span><span style="font-style:italic">Compiler options for floating-point linkage and computations</span>.</a></p></li><li><p><a class="xref" title="There are various valid combinations of FPU options and processors." href="armcc_chr1359124234516.htm"><span style="font-style:italic">4.52 </span><span style="font-style:italic">Floating-point linkage and computational requirements of compiler options</span>.</a></p></li><li><p><a class="xref" title="Not every ARM processor has an FPU, but every one has an implicit --fpu option." href="armcc_chr1359124234797.htm"><span style="font-style:italic">4.53 </span><span style="font-style:italic">Processors and their implicit Floating-Point Units (FPUs)</span>.</a></p></li><li><p><a class="xref" title="For targets that do not support hardware division instructions (for example SDIV and UDIV), you can trap and identify integer division-by-zero errors with the appropriate C library helper functions, __aeabi_idiv0() and __rt_raise()." href="armcc_chr1359124235078.htm"><span style="font-style:italic">4.54 </span><span style="font-style:italic">Integer division-by-zero
errors in C code</span>.</a></p></li><li><p><a class="xref" title="Floating-point division-by-zero errors in software can be trapped and identified using a combination of intrinsics and C library helper functions." href="armcc_chr1359124236294.htm"><span style="font-style:italic">4.55 </span><span style="font-style:italic">Software floating-point division-by-zero errors in C code</span>.</a></p></li><li><p><a class="xref" title="Software floating-point division-by-zero errors can be trapped with the __ieee_status intrinsic." href="armcc_chr1359124236544.htm"><span style="font-style:italic">4.56 </span><span style="font-style:italic">About trapping software floating-point division-by-zero errors</span>.</a></p></li><li><p><a class="xref" title="You can use the C library helper function _fp_trapveneer() to identify the location of a software floating-point division-by-zero error." href="armcc_chr1359124236778.htm"><span style="font-style:italic">4.57 </span><span style="font-style:italic">Identification of software floating-point division-by-zero errors</span>.</a></p></li><li><p><a class="xref" title="Parameters for postmortem debugging can be saved by intercepting _fp_trapveneer()." href="armcc_chr1359124237028.htm"><span style="font-style:italic">4.58 </span><span style="font-style:italic">Software floating-point division-by-zero debugging</span>.</a></p></li><li><p><a class="xref" title="The 1999 C99 standard introduces several new language features." href="armcc_chr1359124237277.htm"><span style="font-style:italic">4.59 </span><span style="font-style:italic">New language features of C99</span>.</a></p></li><li><p><a class="xref" title="The C99 standard introduces several new library features of interest to programmers." href="armcc_chr1359124237527.htm"><span style="font-style:italic">4.60 </span><span style="font-style:italic">New library features of C99</span>.</a></p></li><li><p><a class="xref" title="In C99 you can use // to indicate the start of a one-line comment, like in C++. In C90 mode you can use // comments providing you do not specify --strict." href="armcc_chr1359124237761.htm"><span style="font-style:italic">4.61 </span><span style="font-style:italic">// comments in C99 and C90</span>.</a></p></li><li><p><a class="xref" title="ISO C99 supports compound literals. A compound literal looks like a cast followed by an initializer." href="armcc_chr1359124238010.htm"><span style="font-style:italic">4.62 </span><span style="font-style:italic">Compound literals in C99</span>.</a></p></li><li><p><a class="xref" title="In C90, there is no way to initialize specific members of arrays, structures, or unions. C99 supports the initialization of specific members of an array, structure, or union by either name or subscript through the use of designated initializers." href="armcc_chr1359124238260.htm"><span style="font-style:italic">4.63 </span><span style="font-style:italic">Designated initializers in C99</span>.</a></p></li><li><p><a class="xref" title="C99 supports floating-point numbers that can be written in hexadecimal format." href="armcc_chr1359124238525.htm"><span style="font-style:italic">4.64 </span><span style="font-style:italic">Hexadecimal floating-point numbers in C99</span>.</a></p></li><li><p><a class="xref" title="In a struct with more than one member, the last member of the struct can have incomplete array type. Such a member is called a flexible array member of the struct." href="armcc_chr1359124238837.htm"><span style="font-style:italic">4.65 </span><span style="font-style:italic">Flexible array members in C99</span>.</a></p></li><li><p><a class="xref" title="The __func__ predefined identifier provides a means of obtaining the name of the current function." href="armcc_chr1359124239071.htm"><span style="font-style:italic">4.66 </span><span style="font-style:italic">__func__ predefined identifier in C99</span>.</a></p></li><li><p><a class="xref" title="The C99 keyword inline hints to the compiler that invocations of a function qualified with inline are to be expanded inline." href="armcc_chr1359124239337.htm"><span style="font-style:italic">4.67 </span><span style="font-style:italic">inline functions in C99</span>.</a></p></li><li><p><a class="xref" title="C99 supports the integral data type long long." href="armcc_chr1359124239586.htm"><span style="font-style:italic">4.68 </span><span style="font-style:italic">long long data type in C99 and C90</span>.</a></p></li><li><p><a class="xref" title="You can declare a macro in C99 that accepts a variable number of arguments." href="armcc_chr1359124239851.htm"><span style="font-style:italic">4.69 </span><span style="font-style:italic">Macros with a variable number of arguments in C99</span>.</a></p></li><li><p><a class="xref" title="C99 enables you to mix declarations and statements within compound statements, like in C++." href="armcc_chr1359124240101.htm"><span style="font-style:italic">4.70 </span><span style="font-style:italic">Mixed declarations and statements in C99</span>.</a></p></li><li><p><a class="xref" title="In a for loop, the first expression can be a declaration, like in C++. The scope of the declaration extends to the body of the loop only." href="armcc_chr1359124240335.htm"><span style="font-style:italic">4.71 </span><span style="font-style:italic">New block scopes for selection and iteration statements in C99</span>.</a></p></li><li><p><a class="xref" title="C90 does not permit a #pragma directive to be produced as the result of a macro expansion. However, the C99 _Pragma operator enables you to embed a preprocessor macro in a pragma directive." href="armcc_chr1359124240616.htm"><span style="font-style:italic">4.72 </span><span style="font-style:italic">_Pragma preprocessing operator in C99</span>.</a></p></li><li><p><a class="xref" title="The C99 keyword restrict is an indication to the compiler that different object pointer types and function parameter arrays do not point to overlapping regions of memory." href="armcc_chr1359124240881.htm"><span style="font-style:italic">4.73 </span><span style="font-style:italic">Restricted pointers in C99</span>.</a></p></li><li><p><a class="xref" title="C99 supports additional macros, types, and functions in the standard header &lt;math.h&gt; that are not found in the corresponding C90 standard header." href="armcc_chr1359124241146.htm"><span style="font-style:italic">4.74 </span><span style="font-style:italic">Additional &lt;math.h&gt; library functions in C99</span>.</a></p></li><li><p><a class="xref" title="In C99 mode, the compiler supports complex and imaginary numbers. In GNU mode, the compiler supports complex numbers only." href="armcc_chr1359124241427.htm"><span style="font-style:italic">4.75 </span><span style="font-style:italic">Complex numbers in C99</span>.</a></p></li><li><p><a class="xref" title="C99 introduces the native type _Bool." href="armcc_chr1359124241645.htm"><span style="font-style:italic">4.76 </span><span style="font-style:italic">Boolean type and &lt;stdbool.h&gt; in C99</span>.</a></p></li><li><p><a class="xref" title="In C90, the long data type can serve both as the largest integral type, and as a 32-bit container. C99 removes this ambiguity through the new standard library header files &lt;inttypes.h&gt; and &lt;stdint.h&gt;." href="armcc_chr1359124241911.htm"><span style="font-style:italic">4.77 </span><span style="font-style:italic">Extended integer types and functions in &lt;inttypes.h&gt; and &lt;stdint.h&gt; in
      C99</span>.</a></p></li><li><p><a class="xref" title="The C99 standard header file &lt;fenv.h&gt; provides access to an IEEE 754-compliant floating-point environment for numerical programming." href="armcc_chr1359124242207.htm"><span style="font-style:italic">4.78 </span><span style="font-style:italic">&lt;fenv.h&gt; floating-point environment access in C99</span>.</a></p></li><li><p><a class="xref" title="Using the sprintf family of functions found in the C90 standard header &lt;stdio.h&gt; can be dangerous." href="armcc_chr1359124242425.htm"><span style="font-style:italic">4.79 </span><span style="font-style:italic">&lt;stdio.h&gt; snprintf family of functions in C99</span>.</a></p></li><li><p><a class="xref" title="The new standard header &lt;tgmath.h&gt; defines several families of mathematical functions that are type generic in the sense that they are overloaded on floating-point types." href="armcc_chr1359124242691.htm"><span style="font-style:italic">4.80 </span><span style="font-style:italic">&lt;tgmath.h&gt; type-generic math macros in C99</span>.</a></p></li><li><p><a class="xref" title="Wide character I/O functions have been incorporated into C99. These enable you to read and write wide characters from a file in much the same way as normal characters." href="armcc_chr1359124242940.htm"><span style="font-style:italic">4.81 </span><span style="font-style:italic">&lt;wchar.h&gt; wide character I/O functions in C99</span>.</a></p></li><li><p><a class="xref" title="The ANSI C specification states that static data that is not explicitly initialized, is to be initialized to zero." href="armcc_chr1359124243221.htm"><span style="font-style:italic">4.82 </span><span style="font-style:italic">How to prevent uninitialized data from being initialized to zero</span>.</a></p></li></ul></div></div><div class="footers"><table class="legalfooter" width="100%" border="0" cellpadding="0" cellspacing="0" summary="Legal information footer"><tbody><tr class="legalfooter secstatusbar"><td class="securitycell" align="left" valign="top" width="33%">Non-Confidential</td><td class="pdflinkcell" align="center" valign="top" width="33%"><a href="DUI0375H_mdk_armcc_user_guide.pdf"  rel="nofollow"><img border="0" src="../com.arm.doc.common/images/pdficon_small.gif" alt="PDF file icon"> PDF version</a></td><td class="modificationdatecell" align="right" valign="top" width="33%">ARM DUI0375H</td></tr><tr class="copyrightdocnumbar"><td class="copyrightcell" align="left" valign="top">Copyright © 2007, 2008, 2011, 2012, 2014-2016 ARM. All rights reserved.</td><td> </td><td class="docnumcell" align="right" valign="top"></td></tr></tbody></table><table class="navfooter" width="100%" border="0" cellpadding="0" cellspacing="0" summary="Navigation footer"><tbody><tr class="breadcrumbbar"><td class="breadcrumbcell" colspan="2"><a href="default.htm" accesskey="h">Home</a> &gt; Compiler Coding Practices</td></tr></tbody></table></div>



</div> </td> </tr>

<tr>
    <td class="Bot" colspan="2">
        <table>
    <tr class="Menu">
        <td>
            <h4><a href="/product/">Products</a></h4>
            <h5>Development Tools</h5>
            <ul>
                <li><a href="/Arm/">Arm</a></li>
                <li><a href="/c166/">C166</a></li>
                <li><a href="/c51/">C51</a></li>
                <li><a href="/c251/">C251</a></li>
                <li><a href="/uvision/">&micro;Vision IDE and Debugger</a></li>
            </ul>
        </td>
        <td>
            <h4><a href="#">&nbsp;</a></h4>
            <h5>Hardware &amp; Collateral</h5>
            <ul>
                <li><a href="/ulink/">ULINK Debug Adaptors</a></li>
                <li><a href="/boards2/">Evaluation Boards</a></li>
                <li><a href="/product/brochures.asp">Product Brochures</a></li>
                <li><a href="/dd2/">Device Database</a></li>
                <li><a href="/distis/">Distributors</a></li>
            </ul>
        </td>
        <td>
            <h4><a href="/download/">Downloads</a></h4>
            <ul>
                <li><a href="/demo/eval/arm.htm">MDK-Arm</a></li>
                <li><a href="/demo/eval/c51.htm">C51</a></li>
                <li><a href="/demo/eval/c166.htm">C166</a></li>
                <li><a href="/demo/eval/c251.htm">C251</a></li>
                <li><a href="/download/file/">File downloads</a></li>
            </ul>
        </td>
        <td>
            <h4><a href="/support/">Support</a></h4>
            <ul>
                <li><a href="/support/knowledgebase.asp">Knowledgebase</a></li>
                <li><a href="/forum/">Discussion Forum</a></li>
                <li><a href="/support/man/">Product Manuals</a></li>
                <li><a href="/appnotes/">Application Notes</a></li>
            </ul>
        </td>
        <td>
            <h4>Contact</h4>
            <ul>
                <li><a href="/distis/">Distributors</a></li>
                <li><a href="/product/prices.asp" onclick="_gaq.push(['_trackEvent', 'Quotes', 'Page Hit', 'Request a Quote Footer',1,true]);">Request a Quote</a></li>
                <li><a href="/company/contact/">Sales Contacts</a></li>
            </ul>
        </td>

    </tr>
    <tr class="boilerplate">
        <td>&nbsp;
        </td>
        <td colspan="3">
            <p class="footerlinks"><a href="/company/cookiesettings">Cookie Settings</a> | <a href="/company/terms" target="_blank">Terms of Use</a> | <a href="/company/privacy" target="_blank">Privacy</a> | <a href="/company/accessibility" target="_blank">Accessibility</a> | <a href="https://www.arm.com/company/policies/trademarks">Trademarks</a> | <a href="/company/contact/">Contact Us</a> | <a href="/support/feedback.asp">Feedback</a></p>
            <p class="footerlinks"><a href="/company/terms" target="_blank">Copyright</a> &copy; 2005-2019 <a href="/company">Arm Limited</a> (or its affiliates). All rights reserved.</p>
        </td>
        <td style="text-align: right;"><img src="/content/images/Arm_logo_white_150LG.png" alt="Arm logo" height="32" /></td> 
    </tr>

</table>


        <!--			<script src="/_js/t6_ptg.js" type="text/javascript"></script>
			<noscript>
				<div><img src="/_images/ptg.gif?js=0" height=1 width=1 alt="" title="" style="border:none"> </div>
			</noscript>
        <script type="text/javascript">var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-3800502-2']); _gaq.push(['_setDomainName', 'keil.com']); _gaq.push(['_trackPageview']); (function () { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();</script>-->
    </td>

</tr>
</table>
<!--Cookie policy html-->
<div id="cookiemodule">
    <div class="modouter">
        <div class="modinner">
            <h5>Important information</h5>
            <div class="modcontent">
                <div class="intro">
                    <p>This site uses cookies to store information on your computer. By continuing to use our site, you consent to our <a href="/company/cookiepolicy" target="_blank">cookies</a>.</p>
                </div>
                <button class="accept" id="">Don't show this message again</button>
                <p>
                    <a href="/company/cookiesettings/" class="change-settings">Change Settings</a>
                </p>
            </div>
        </div>
    </div>
</div>
<div id="privacymodule">
    <div class="modouter">
        <div class="modinner">
            <h5>Privacy Policy Update</h5>
            <div class="modcontent">
                <div class="intro">
                    <p>Arm’s Privacy Policy has been updated. By continuing to use our site, you consent to Arm’s Privacy Policy. Please review our <a href="/company/privacy" target="_blank">Privacy Policy</a> to learn more about our collection, use and transfers <br /> of your data.</p>
                </div>
                <button class="acceptpolicy" id="">Accept and hide this message</button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript" src="/Scripts/Zendesk.js?v=20191122"></script>

<script type="text/javascript">
    if ((read('acceptCookie') == null) || (read('acceptCookie') == '2') || (read('acceptCookie') == '3')) {
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-3800502-2']);
        _gaq.push(['_setDomainName', 'keil.com']);
        _gaq.push(['_trackPageview']);

        (function () {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
    }
</script>
<script type="text/javascript">
    if ((read('acceptCookie') == null) || (read('acceptCookie') == '3')) {
        $.getScript('https://munchkin.marketo.net/munchkin.js', function () {
            mktoMunchkin("312-SAX-488");
        });
    }
</script>

<span id="real-url-span" style="display: none;">/support/man/docs/armcc/armcc_chr1359124220881.asp</span>

</body>
</html>
